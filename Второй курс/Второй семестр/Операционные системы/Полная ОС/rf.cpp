//переименовывание файла 
#include <cstdlib> 
#include <iostream> 
#include <sys/types.h> 
#include <sys/stat.h> 
#include <fcntl.h> 
#include <unistd.h> 
#include "rf.h" 
#include "err1.h"

using namespace std;

#define BS 1 

char buf1[BS];
//Данная процедура работает по следующему алгоритму. 1)Открытие файла для чтения. 2)Создание нового файла 3)Копирование информации из первого файла (исходного) во второй(новый). 4)Удаление первого файла
void renamefile(char *path, char *nname){
	int i=0, ffd, sfd;
	ssize_t count;// тоже, что и size_, только знаковый используется когда нужно сообщить об ошибке, вернув отрицательный размер блока памяти
//1. Открытие файла для чтения
//O_RDONLY открытие только на чтения файла	
	ffd = open(path, O_RDONLY);
	if(ffd == -1)
		err1();
//2. Создание нового файла
//О_WRONLY Только запись (1) ,O_CREAT- файл будет создан, если он не создан.цифры 0644, означающие права на файл, под которыми он открывается (или создается).О_EХCL Выдать ошибку, если файл существует при использовании O_CREAT   
	sfd = open(nname, O_WRONLY|O_CREAT|O_EXCL, 0644);
	if(sfd == -1)
		err1();
//3. Копирование информации из первого файла (исходного) во второй(новый)
//read() пытается записать count байтов файлового описателя ffd в буфер, адрес которого начинается с buf. Write записывает до count байтов из буфера buf в файл, на который ссылается файловый описатель ffd. Запись в файл: системный вызов write(). Чтение файла: системный вызов read()  
	while(count = read(ffd, buf1, BS) > 0){ 
		write(sfd, buf1, count);
		i++;
	}
//Если количество count равно нулю, то read() возвращает это нулевое значение и завершает свою работу.
	if(count == -1)
		err1();
	cout << "Copy sucсesfull\n";
	cout << "Bytes copyed:" << i;
	close(ffd);
//4. Удаление первого файла
//Системный вызов unlink() объявлен в файле unistd.h,unlink удаляет имя из файловой системы. Если это имя было последней ссылкой на файл и больше нет процессов, которые держат этот файл открытым, данный файл удаляется и место, которое он занимает освобождается для дальнейшего использования. 
	unlink(path);
	cout << "\nSource file sucsefully deleted\n";
	close(sfd);
}


